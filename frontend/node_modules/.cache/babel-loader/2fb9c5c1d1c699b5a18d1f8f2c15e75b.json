{"ast":null,"code":"import axios from \"axios\";\nimport join from \"url-join\";\nconst isAbsoluteURLRegex = /^(?:\\w+:)\\/\\//;\nconst user = JSON.parse(localStorage.getItem(\"user\"));\naxios.interceptors.request.use(async config => {\n  if (!isAbsoluteURLRegex.test(config.url)) {\n    config.url = join(process.env.REACT_APP_API_URL, config.url);\n  }\n\n  if (user && user.accessToken) {\n    config.headers = {\n      \"x-access-token\": user.accessToken\n    };\n  }\n\n  config.timeout = 900000; // 10 Second\n\n  return config;\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  console.log(JSON.stringify(error, undefined, 2)); // if (error.response.status === \"401\") {\n  //   const refreshToken = localStorage.getItem(server.REFRESH_TOKEN_KEY);\n  //   let result = await axios.post(\n  //     \"http://localhost:8081/api/v2/refresh/token\",\n  //     {\n  //       refreshToken: refreshToken\n  //     }\n  //   );\n  //   const token = result.data.jwt;\n  //   localStorage.setItem(server.TOKEN_KEY, token);\n  //   debugger;\n  //   return axios.request(error.config);\n  // }\n\n  if (axios.isCancel(error)) {\n    return Promise.reject(error);\n  } else if (!error.response) {\n    alert(JSON.stringify(error));\n    return Promise.reject({\n      code: \"NOT_CONNECT_NETWORK\",\n      message: \"Cannot connect to server, Please try again.\"\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport const httpClient = axios;","map":{"version":3,"sources":["/Users/thanchanokmaneesutham/TPE/Internship/react-redux-hook/frontend/src/services/httpClient.js"],"names":["axios","join","isAbsoluteURLRegex","user","JSON","parse","localStorage","getItem","interceptors","request","use","config","test","url","process","env","REACT_APP_API_URL","accessToken","headers","timeout","response","error","console","log","stringify","undefined","isCancel","Promise","reject","alert","code","message","httpClient"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,UAAjB;AAEA,MAAMC,kBAAkB,GAAG,eAA3B;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AAEAP,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,MAAOC,MAAP,IAAkB;AAC/C,MAAI,CAACT,kBAAkB,CAACU,IAAnB,CAAwBD,MAAM,CAACE,GAA/B,CAAL,EAA0C;AACxCF,IAAAA,MAAM,CAACE,GAAP,GAAaZ,IAAI,CAACa,OAAO,CAACC,GAAR,CAAYC,iBAAb,EAAgCL,MAAM,CAACE,GAAvC,CAAjB;AACD;;AAED,MAAIV,IAAI,IAAIA,IAAI,CAACc,WAAjB,EAA8B;AAC5BN,IAAAA,MAAM,CAACO,OAAP,GAAiB;AAAE,wBAAkBf,IAAI,CAACc;AAAzB,KAAjB;AACD;;AAEDN,EAAAA,MAAM,CAACQ,OAAP,GAAiB,MAAjB,CAT+C,CAStB;;AACzB,SAAOR,MAAP;AACD,CAXD;AAaAX,KAAK,CAACQ,YAAN,CAAmBY,QAAnB,CAA4BV,GAA5B,CACGU,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIE,MAAOC,KAAP,IAAiB;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAI,CAACoB,SAAL,CAAeH,KAAf,EAAsBI,SAAtB,EAAiC,CAAjC,CAAZ,EADe,CAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAIzB,KAAK,CAAC0B,QAAN,CAAeL,KAAf,CAAJ,EAA2B;AACzB,WAAOM,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACD,GAFD,MAEO,IAAI,CAACA,KAAK,CAACD,QAAX,EAAqB;AAC1BS,IAAAA,KAAK,CAACzB,IAAI,CAACoB,SAAL,CAAeH,KAAf,CAAD,CAAL;AACA,WAAOM,OAAO,CAACC,MAAR,CAAe;AACpBE,MAAAA,IAAI,EAAE,qBADc;AAEpBC,MAAAA,OAAO,EAAE;AAFW,KAAf,CAAP;AAID;;AACD,SAAOJ,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACD,CA/BH;AAkCA,OAAO,MAAMW,UAAU,GAAGhC,KAAnB","sourcesContent":["import axios from \"axios\";\nimport join from \"url-join\";\n\nconst isAbsoluteURLRegex = /^(?:\\w+:)\\/\\//;\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\naxios.interceptors.request.use(async (config) => {\n  if (!isAbsoluteURLRegex.test(config.url)) {\n    config.url = join(process.env.REACT_APP_API_URL, config.url);\n  }\n\n  if (user && user.accessToken) {\n    config.headers = { \"x-access-token\": user.accessToken };\n  }\n\n  config.timeout = 900000; // 10 Second\n  return config;\n});\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    console.log(JSON.stringify(error, undefined, 2));\n    // if (error.response.status === \"401\") {\n    //   const refreshToken = localStorage.getItem(server.REFRESH_TOKEN_KEY);\n    //   let result = await axios.post(\n    //     \"http://localhost:8081/api/v2/refresh/token\",\n    //     {\n    //       refreshToken: refreshToken\n    //     }\n    //   );\n\n    //   const token = result.data.jwt;\n    //   localStorage.setItem(server.TOKEN_KEY, token);\n    //   debugger;\n    //   return axios.request(error.config);\n    // }\n\n    if (axios.isCancel(error)) {\n      return Promise.reject(error);\n    } else if (!error.response) {\n      alert(JSON.stringify(error));\n      return Promise.reject({\n        code: \"NOT_CONNECT_NETWORK\",\n        message: \"Cannot connect to server, Please try again.\",\n      });\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const httpClient = axios;\n"]},"metadata":{},"sourceType":"module"}